package application;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;

import business.Airline;
import business.AirlineResultSet;
import business.Airport;
import business.AirportResultSet;
import business.Booking;
import business.BookingArchive;
import business.BookingArchiveResultSet;
import business.BookingResultSet;
import business.Flight;
import business.FlightInformationSet;
import business.FlightResultSet;
import business.ReservationSystem;
import business.Pilot;
import business.PilotResultSet;
import business.Route;
import business.RouteResultSet;
import business.User;
import business.UserResultSet;

public class Main {

	private static final String[] INITIAL_OPTIONS = { "Login", "Signup", "Exit" };

	private static final String[] SCHEMA_OPTIONS = {"Booking options",
			"BookingArchive options", "Flight options", "Pilot options",
			"Logout" };

	private static final String[] EXIT_OPTION_ONLY = { "Exit" };

	private static final String[] SEAT_OPTIONS = { "Economy", "Business", "First Class", "Exit" };

	private static final String[] FLIGHT_OPTIONS = { "Get economy passengers for flight",
			"Get business passengers for flight", "Get first class passengers for flight", "Get flights by date",
			"Get flights by origin", "Get flights by airline", "Get flights by destination", "Get flight status",
			"Get seniors and children on flight", "Get number of passengers on flight", "Get number of available seats on flight", "Exit" };
	
	private static final String[] PILOT_OPTIONS = {
			"Get available pilots",
			"Exit"
	};
	
	private static final String[] BOOKING_ARCHIVE_OPTIONS = {
			"Archive bookings from cutoff date and time",
			"Get archived bookings",
			"Exit"
	};
	
	public static boolean validateDate(String date) {
		String[] split = date.split("-");
		if (split.length < 3) {
			System.out.println("Invalid date inputted!");
			return false;
		}

		if (split[0].length() != 4) {
			System.out.println("Length of year must be 4 characters!");
			return false;
		}

		if (split[1].length() != 2) {
			System.out.println("Length of month must be 2 characters!");
			return false;
		}

		if (split[2].length() != 2) {
			System.out.println("Length of day must be 2 characters!");
			return false;
		}
		
		return true;
	}

	public static String presentOptions(String[] options, Scanner scanner, String optionText) {
		for (int i = 0; i < options.length; i++) {
			System.out.printf("(%s) %s\n", i, options[i]);
		}
		if (optionText == null) {
			optionText = "Option";
		}
		System.out.printf("%s: ", optionText);
		String option = scanner.nextLine().trim();
		int optNum = Integer.parseInt(option);

		if (optNum > options.length - 1) {
			return "-1";
		}

		return option;
	}

	public static boolean signUpAccount(ReservationSystem reservationSystem, String[] credentials) {
		User user = reservationSystem.getUser();
		String email = null, passwd, verifyPasswd, birthDate, firstName, lastName, address, phoneNum;
		Scanner scanner = new Scanner(System.in);
		boolean emailTaken = true, passwdVer = false;
		boolean success = false;

		System.out.println("To create Account, please complete the following fields");
		System.out.println("First Name: ");
		firstName = scanner.next();
		System.out.println("Last Name: ");
		lastName = scanner.next();
		System.out.println("Birth Date: ");
		birthDate = scanner.next();
		System.out.println("Address: ");
		address = scanner.next();
		System.out.println("Phone Number: ");
		phoneNum = scanner.next();

		while (emailTaken) {
			System.out.println("Enter Email: ");
			email = scanner.next();
			emailTaken = user.isTaken(email);
		}

		credentials[0] = email;

		while (!passwdVer) {
			System.out.println("Enter Password: ");
			passwd = scanner.next();
			System.out.println("Re-Enter Password: ");
			verifyPasswd = scanner.next();
			
			if (passwd.length() < 5) {
				System.out.println("Password must be longer than 5 characters");
				continue;
			}

			if (passwd.equals(verifyPasswd)) {
				passwdVer = true;
				user.createUser(firstName, lastName, email, passwd, birthDate, address, phoneNum);
				success = true;
				System.out.println("Account Created Successfully");
			} else {
				System.out.println("Passwords are not matching. Please try again");
				passwdVer = false;
			}
		}

		return success;
	}

	public static boolean loginAccount(ReservationSystem reservationSystem, String[] credentials) {
		User user = reservationSystem.getUser();
		String email, passwd;
		boolean loginSuccess = false;
		Scanner scanner = new Scanner(System.in);

		while (!loginSuccess) {
			System.out.println("Email: ");
			email = scanner.next();
			credentials[0] = email;

			System.out.println("Password: ");
			passwd = scanner.next();

			if (user.Login(email, passwd) == true) {
				System.out.println("Login Successful!");
				loginSuccess = true;
			} else {
				System.out.println("Login Unsucessful");
				loginSuccess = false;
			}
		}

		return loginSuccess;
	}

	public static void presentBookingOptions(ReservationSystem reservationSystem, Scanner scanner, int userId) {
		boolean exit = false;
		while (true) {
			System.out.println("Booking options");
			String[] options = reservationSystem.getBooking().getUserOptions();
			String option = presentOptions(options, scanner, null);

			switch (option) {
			case "0":
				String airlineName = null;
				String departureDate = null;
				AirportResultSet[] airports = reservationSystem.getAirport().getAirports();

				String[] airportOptions = new String[airports.length + 1];

				for (int i = 0; i < airports.length; i++) {
					AirportResultSet rs = airports[i];
					airportOptions[i] = String.format("Airport = %s, City = %s, State = %s", rs.getName(), rs.getCity(),
							rs.getState());
				}

				airportOptions[airports.length] = "Cancel";

				System.out.println("USER REQUEST INITIATED: Book Flight");

				String originAirportOption = presentOptions(airportOptions, scanner, "ORIGIN airport option");

				if (originAirportOption.equals(Integer.toString(airports.length - 1))) {
					continue;
				}

				String destinationAirportOption = presentOptions(airportOptions, scanner, "DESTINATION airport option");

				if (destinationAirportOption.equals(Integer.toString(airports.length - 1))) {
					continue;
				}

				if (originAirportOption.equals(destinationAirportOption)) {
					System.out.println("You can't travel to the same location!");
					continue;
				}

				AirportResultSet originAirport = airports[Integer.parseInt(originAirportOption)];
				AirportResultSet destinationAirport = airports[Integer.parseInt(destinationAirportOption)];

				RouteResultSet[] routes = reservationSystem.getRoute().getRoutesFromOriginAndDestinationAirportID(
						originAirport.getAirportID(), destinationAirport.getAirportID());

				if (routes.length == 0) {
					System.out.printf("No routes exist for the selected flight; Origin: %s, Destination: %s\n",
							originAirport.getName(), destinationAirport.getName());
					continue;
				}

				RouteResultSet selectedRoute = routes[0];

				// Select available flights for given route
				FlightResultSet[] flights = reservationSystem.getFlight()
						.getFlightsByRouteID(selectedRoute.getRouteID());
				
				
				if (flights.length == 0) {
					System.out.printf("No more flights available for the given route; Origin: %s, Destination: %s\n",
							originAirport.getName(), destinationAirport.getName());
					continue;
				}
				
				String[] flightOptions = new String[flights.length + 1];
				int availableFlights = 0;

				for (int i = 0; i < flights.length; i++) {
					FlightResultSet rs = flights[i];
					int availableSeats = reservationSystem.getFlight().getNumAvailableSeats(rs.getFlightID());
					/*
					 * if (availableSeats == 0) { continue; }
					 */
					availableFlights++;
					flightOptions[i] = String.format(
							"Flight ID = %s, DepartureDate = %s, DepartureTime = %s, ArrivalTime = %s, MaxNumberOfSeats = %s, AvailableSeats = %s",
							rs.getFlightID(), rs.getDepartureDate(), rs.getDepartureTime(), rs.getArrivalTime(),
							rs.getMaxNumSeats(), availableSeats);
					System.out.println(flightOptions[i]);
				}

				/*
				 * if (availableFlights == 0) { System.out.
				 * printf("No more available seats in flights for given route from: %s, to: %s\n"
				 * , originAirport.getName(), destinationAirport.getName()); continue; }
				 */

				flightOptions[availableFlights] = "Cancel";

				String[] availableFlightOptions = new String[availableFlights + 1];

				System.arraycopy(flightOptions, 0, availableFlightOptions, 0, availableFlights + 1);

				String selectedFlightOption = presentOptions(availableFlightOptions, scanner, "Select flight option");

				if (selectedFlightOption.equals(Integer.toString(availableFlights))) {
					continue;
				}

				FlightResultSet selectedFlight = flights[Integer.parseInt(selectedFlightOption)];

				String selectedSeatOption = presentOptions(SEAT_OPTIONS, scanner, "Select seat option");

				// User wants to exit
				if (selectedSeatOption.equals(Integer.toString(SEAT_OPTIONS.length - 1))) {
					continue;
				}

				// Get price
				double price = 100 + (1 + Integer.parseInt(selectedSeatOption) * 100);

				AirlineResultSet airline = reservationSystem.getAirline()
						.getAirlineByID(selectedRoute.getAirlineID())[0];

				// int userId, String airlineName, String departureDate, int originAirID, int
				// destinationAirID, int fID, int rID, double totalAmount, String seatClass
				reservationSystem.getBooking().bookRes(userId, selectedFlight.getFlightID(), selectedRoute.getRouteID(),
						SEAT_OPTIONS[Integer.parseInt(selectedSeatOption)], price);

				System.out.println("Flight booked!");

				break;
			case "1":

				BookingResultSet[] bookings = reservationSystem.getBooking().getUserBookings(userId);
				FlightResultSet[] bookingFlights = new FlightResultSet[bookings.length];

				for (int i = 0; i < bookings.length; i++) {
					bookingFlights[i] = reservationSystem.getFlight().getFlightByFID(bookings[i].getFlightId());
				}

				for (int i = 0; i < bookingFlights.length; i++) {
					FlightResultSet rs = bookingFlights[i];
					System.out.printf(
							"(.) Flight ID = %s, DepartureDate = %s, DepartureTime = %s, ArrivalTime = %s, Seat Class = %s\n",
							rs.getFlightID(), rs.getDepartureDate(), rs.getDepartureTime(), rs.getArrivalTime(),
							bookings[i].getSeatClass());
				}

				String getBookingOption = presentOptions(EXIT_OPTION_ONLY, scanner, "Option:");

				if (getBookingOption.equals("0")) {
					continue;
				}

				break;
			case "2":

				BookingResultSet[] bookings2 = reservationSystem.getBooking().getUserBookings(userId);
				FlightResultSet[] bookingFlights2 = new FlightResultSet[bookings2.length];

				for (int i = 0; i < bookings2.length; i++) {
					bookingFlights2[i] = reservationSystem.getFlight().getFlightByFID(bookings2[i].getFlightId());
				}

				String[] flightCancellationOptions = new String[bookings2.length + 1];

				for (int i = 0; i < bookingFlights2.length; i++) {
					FlightResultSet rs = bookingFlights2[i];
					flightCancellationOptions[i] = String.format(
							"Flight ID = %s, DepartureDate = %s, DepartureTime = %s, ArrivalTime = %s, Seat Class = %s\n",
							rs.getFlightID(), rs.getDepartureDate(), rs.getDepartureTime(), rs.getArrivalTime(),
							bookings2[i].getSeatClass());
				}

				flightCancellationOptions[flightCancellationOptions.length - 1] = "Exit";

				String selectedFlightForCancellation = presentOptions(flightCancellationOptions, scanner,
						"Cancel flight");

				if (selectedFlightForCancellation.equals(Integer.toString(flightCancellationOptions.length - 1))) {
					continue;
				}

				reservationSystem.getBooking()
						.cancelFlightRes(bookings2[Integer.parseInt(selectedFlightForCancellation)].getTicketId());

				System.out.println("Flight cancelled!");

				break;
			case "3":

				BookingResultSet[] bookings1 = reservationSystem.getBooking().getUserBookings(userId);
				FlightResultSet[] bookingFlights1 = new FlightResultSet[bookings1.length];

				for (int i = 0; i < bookings1.length; i++) {
					bookingFlights1[i] = reservationSystem.getFlight().getFlightByFID(bookings1[i].getFlightId());
				}

				String[] flightSeatUpgradeOptions = new String[bookings1.length + 1];

				for (int i = 0; i < bookingFlights1.length; i++) {
					FlightResultSet rs = bookingFlights1[i];
					flightSeatUpgradeOptions[i] = String.format(
							"(.) Flight ID = %s, DepartureDate = %s, DepartureTime = %s, ArrivalTime = %s, Seat Class = %s\n",
							rs.getFlightID(), rs.getDepartureDate(), rs.getDepartureTime(), rs.getArrivalTime(),
							bookings1[i].getSeatClass());
				}

				flightSeatUpgradeOptions[flightSeatUpgradeOptions.length - 1] = "Cancel";

				String selectedFlightForSeatUpgrade = presentOptions(flightSeatUpgradeOptions, scanner,
						"Upgrade flight:");

				if (selectedFlightForSeatUpgrade.equals(Integer.toString(flightSeatUpgradeOptions.length - 1))) {
					continue;
				}

				String selectedSeatOption1 = presentOptions(SEAT_OPTIONS, scanner, "Select seat option");

				// User wants to exit
				if (selectedSeatOption1.equals(Integer.toString(SEAT_OPTIONS.length - 1))) {
					continue;
				}

				reservationSystem.getBooking().upgradeClass(
						bookings1[Integer.parseInt(selectedFlightForSeatUpgrade)].getTicketId(),
						SEAT_OPTIONS[Integer.parseInt(selectedSeatOption1)]);

				System.out.println("Upgraded seat class!");

				break;
			case "4":
				exit = true;
				break;
			default:
				System.out.println("Invalid option inputted!");
				break;
			}

			if (exit) {
				break;
			}

		}
	}

	public static void presentFlightOptions(ReservationSystem reservationSystem, Scanner scanner) {
		System.out.println("Flight options");
		FlightResultSet[] allFlights = reservationSystem.getFlight().getAllFlights();
		String[] flightStrings = new String[allFlights.length + 1];

		for (int i = 0; i < flightStrings.length - 1; i++) {
			flightStrings[i] = allFlights[i].toString();
		}

		flightStrings[flightStrings.length - 1] = "Exit";

		while (true) {
			String option = presentOptions(FLIGHT_OPTIONS, scanner, null);
			if (option.equals("0") || option.equals("1") || option.equals("2")) {
				int selectedFlightInt = Integer.parseInt(presentOptions(flightStrings, scanner, "Option"));

				if (selectedFlightInt == flightStrings.length - 1) {
					continue;
				}

				FlightResultSet selectedFlight = allFlights[selectedFlightInt];

				UserResultSet[] passengers = null;

				if (option.equals("0")) {
					passengers = reservationSystem.getEconomyPassengers(selectedFlight.getFlightID());
				} else if (option.equals("1")) {
					passengers = reservationSystem.getBusinessPassengers(selectedFlight.getFlightID());
				} else {
					passengers = reservationSystem.getFirstClassPassengers(selectedFlight.getFlightID());
				}

				for (int i = 0; i < passengers.length; i++) {
					System.out.println(passengers[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("3")) {
				System.out.println("Enter date (YYYY-MM-DD):");
				String date = scanner.nextLine();

				boolean isValidDate = validateDate(date);
				
				if (!isValidDate) {
					continue;
				}

				FlightInformationSet[] flights = reservationSystem.getFlight().getFlightsByDate(date);

				for (int i = 0; i < flights.length; i++) {
					System.out.println(flights[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("4")) {
				System.out.println("Enter origin city:");
				String city = scanner.nextLine();

				System.out.println("Enter origin state:");
				String state = scanner.nextLine();

				FlightInformationSet[] flights = reservationSystem.getFlight().getFlightsByOrigin(city, state);

				for (int i = 0; i < flights.length; i++) {
					System.out.println(flights[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;

			} else if (option.equals("5")) {
				System.out.println("Enter airline:");
				String airline = scanner.nextLine();

				FlightInformationSet[] flights = reservationSystem.getFlight().getFlightsByAirline(airline);

				for (int i = 0; i < flights.length; i++) {
					System.out.println(flights[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("6")) {
				System.out.println("Enter destination city:");
				String city = scanner.nextLine();

				System.out.println("Enter destination state:");
				String state = scanner.nextLine();

				FlightInformationSet[] flights = reservationSystem.getFlight().getFlightsByDestination(city, state);

				for (int i = 0; i < flights.length; i++) {
					System.out.println(flights[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("7")) {
				int selectedFlightInt = Integer.parseInt(presentOptions(flightStrings, scanner, "Option"));

				if (selectedFlightInt == flightStrings.length - 1) {
					continue;
				}

				FlightResultSet selectedFlight = allFlights[selectedFlightInt];

				String status = reservationSystem.getFlight().getFlightStatus(selectedFlight.getFlightID());

				System.out.println("Flight status: " + status);

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("8")) {
				int selectedFlightInt = Integer.parseInt(presentOptions(flightStrings, scanner, "Option"));

				if (selectedFlightInt == flightStrings.length - 1) {
					continue;
				}

				FlightResultSet selectedFlight = allFlights[selectedFlightInt];

				UserResultSet[] users = reservationSystem.getFlight()
						.getSeniorAndChildrenOnFlight(selectedFlight.getFlightID());

				System.out.println("Seniors and children");

				for (int i = 0; i < users.length; i++) {
					System.out.println(users[i].toString());
				}

				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("9")) {
				int selectedFlightInt = Integer.parseInt(presentOptions(flightStrings, scanner, "Option"));

				if (selectedFlightInt == flightStrings.length - 1) {
					continue;
				}

				FlightResultSet selectedFlight = allFlights[selectedFlightInt];
				
				System.out.println("Number of passengers on flight: " + reservationSystem.getFlight().getNumPassengers(selectedFlight.getFlightID()));
				
				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
			} else if (option.equals("10")) {
				int selectedFlightInt = Integer.parseInt(presentOptions(flightStrings, scanner, "Option"));

				if (selectedFlightInt == flightStrings.length - 1) {
					continue;
				}

				FlightResultSet selectedFlight = allFlights[selectedFlightInt];
				
				System.out.println("Number of available seats on flight: " + reservationSystem.getFlight().getNumAvailableSeats(selectedFlight.getFlightID()));
				
				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");
			} else {
				break;
			}
		}
	}
	
	public static void presentPilotOptions(ReservationSystem reservationSystem, Scanner scanner) {
		System.out.println("Pilot options");
		AirlineResultSet[] allAirlines = reservationSystem.getAirline().getAllAirlines();
		String[] airlineStrings = new String[allAirlines.length + 1];

		for (int i = 0; i < airlineStrings.length - 1; i++) {
			airlineStrings[i] = allAirlines[i].toString();
		}

		airlineStrings[airlineStrings.length - 1] = "Exit";
		
		while (true) {
			String option = presentOptions(PILOT_OPTIONS, scanner, null);
			if (option.equals("0")) {
				int selectedAirlineInt = Integer.parseInt(presentOptions(airlineStrings, scanner, "Option"));

				if (selectedAirlineInt == airlineStrings.length - 1) {
					continue;
				}

				AirlineResultSet selectedAirline = allAirlines[selectedAirlineInt];
				
				String[] availablePilots = reservationSystem.getPilot().getAvailablePilots(selectedAirline.getAirlineID());
				
				for (int i = 0; i < availablePilots.length; i ++) {
					System.out.println("Available pilot: " + availablePilots[i]);
				}
				
				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
				
			} else {
				break;
			}
		}
	}
	
	public static boolean validateTime(String time) {
		String[] split = time.split(":");
		
		if (split.length != 3) {
			System.out.println("Invalid time format passed in!");
			return false;
		}
		
		if (split[0].length() != 2) {
			System.out.println("Hour must have two characters!");
			return false;
		}
		
		if (split[1].length() != 2) {
			System.out.println("Minute must have two characters!");
			return false;
		}
		
		if (split[2].length() != 2) {
			System.out.println("Second must have two characters!");
			return false;
		}
		
		return true;
	}
	
	public static void presentBookingArchiveOptions(ReservationSystem reservationSystem, Scanner scanner) {
		System.out.println("Booking archive options");
		
		while (true) {
			String option = presentOptions(BOOKING_ARCHIVE_OPTIONS, scanner, null);
			if (option.equals("0")) {
				
				System.out.println("Enter date (YYYY-MM-DD):");
				String date = scanner.nextLine().trim();

				boolean isValidDate = validateDate(date);
				
				if (!isValidDate) {
					continue;
				}
				
				System.out.println("Enter time (HH:MM:SS): ");
				String time = scanner.nextLine().trim();
				
				boolean isValidTime = validateTime(time);
				
				if (!isValidTime) {
					continue;
				}
				
				reservationSystem.getBookingArchive().archiveBooking(date + " " + time);
				
				System.out.println("Successfully archived bookings!");
				
				continue;
				
			} else if (option.equals("1")) {
				BookingArchiveResultSet[] results = reservationSystem.getBookingArchive().getArchivedFlights();
				
				for (int i = 0; i < results.length; i++) {
					System.out.println(results[i].toString());
				}
				
				presentOptions(EXIT_OPTION_ONLY, scanner, "Option");

				continue;
				
			} else {
				break;
			}
		}
	}

	public static void main(String[] args) {

		System.out.println("-------- MySQL JDBC Connection Testing ------------");
		System.out.println("MySQL JDBC Driver Registered!");

		Connection connection = null;

		try {
			connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/airline_res?serverTimezone=UTC",
					"ardbmanager", "admin");
		} catch (SQLException e) {
			System.out.println("Connection Failed! Check output console");
			e.printStackTrace();
			return;
		}

		if (connection != null) {
			System.out.println("You made it, take control your database now!");
		} else {
			System.out.println("Failed to make connection!");
			System.exit(1);
		}

		ReservationSystem reservationSystem = new ReservationSystem(connection);

		boolean loggedIn = false;
		int userId = 0;

		Scanner scanner = new Scanner(System.in);

		String[] credentials = new String[1];

		while (true) {
			System.out.println("-----Airline Reservation System-----");

			if (!loggedIn) {

				String option = presentOptions(INITIAL_OPTIONS, scanner, "Select an option");

				switch (option) {
				case "0":
					loggedIn = loginAccount(reservationSystem, credentials);
					break;
				case "1":
					loggedIn = signUpAccount(reservationSystem, credentials);
					break;
				case "2":
					System.out.println("You have chosen to exit program. \nGoodbye.");
					System.exit(0);
				}

			}

			if (loggedIn) {
				userId = reservationSystem.getUser().getUserIdFromEmail(credentials[0]);
				if (userId < 0) {
					loggedIn = false;
				}
			} else {
				continue;
			}

			System.out.println("Select an option");
			String option = presentOptions(SCHEMA_OPTIONS, scanner, null);

			switch (option) {
			case "0":
				presentBookingOptions(reservationSystem, scanner, userId);
				break;
			case "1":
				presentBookingArchiveOptions(reservationSystem, scanner);
				break;
			case "2":
				presentFlightOptions(reservationSystem, scanner);
				break;
			case "3":
				presentPilotOptions(reservationSystem, scanner);
				break;
			case "4":
				loggedIn = false;
				break;
			default:
				System.out.println("Invalid option inputted!");
			}

		}
	}
}
